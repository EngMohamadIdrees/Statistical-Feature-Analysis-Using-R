#Reading Data from csv
proteomes <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\77_cancer_proteomes_CPTAC_itraq.csv")
clinical <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\clinical_data_breast_cancer.csv")
gene_proteins <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\PAM50_proteins.csv")
#-------------------------------------Part 1 -------------------------------------------------
#Delete all row have  missing value from data
proteomes=na.omit(proteomes)
#Saving Row names of Proteomes to make it column name
n <- proteomes$RefSeq_accession_number
#Subset Column from 4 index to last index then transpose  the data frame
proteomes <- as.data.frame(t(proteomes[,4:86]))
View(proteomes)
View(proteomes)
#get back names of row  that saved in n to make it  name of column
colnames(proteomes) <- n
#bind the data frame to proteomes
proteomes <- cbind(rownames(proteomes), data.frame(proteomes, row.names=NULL))
#name first column same as in clinical data csv
colnames(proteomes)[1] <- "Complete.TCGA.ID"
get.clinical.id <- function(proteome.id) {
x = substr(proteome.id, 4, 7)
y = substr(proteome.id, 0, 2)
paste("TCGA",y,x,sep="-")
}
#sapply to id column in proteomes
proteomes$Complete.TCGA.ID <- sapply(proteomes$Complete.TCGA.ID, get.clinical.id)
#inner join
library(dplyr)
data <-  inner_join(clinical, proteomes, by = "Complete.TCGA.ID")
View(data)
View(proteomes)
#-------------------------------------part2-----------------------------------------------------------
#2.1
bool<-data$HER2.Final.Status
for(i in 1:80)
{
if( bool[i] =='Negative')
{
bool[i]=0
}
else if(bool[i]=="Positive")
{
bool[i]=1
}
else{
bool[i]=-1
}
}
bool<-as.numeric(bool)
vector=c(1:20)
index=1
coln=c(colnames(data[,31:50]))
for(i in 31:50)
{
acess<-data[,i]
final<-cor(bool,acess,method ="pearson")
vector[index]=final
index=index+1
}
prot=data.frame(coln,vector)
prot
#2.3
threshold=-0.2
filtered=subset(prot,prot$vector>threshold)
#-------------------------------------part3--------------------------------------
#3
negative=subset(data,data$HER2.Final.Status=='Negative')
Positive=subset(data,data$HER2.Final.Status=='Positive')
New_data<-rbind(negative,Positive)
vector2=c()
index=1
for(i in 31:50)
{
vector2[index]=t.test(New_data[,i]~New_data$HER2.Final.Status,data=New_data)$p.value
index=index+1
}
new_data_frame<-data.frame(coln,vector2)
new_data_frame
the_rest=subset(new_data_frame,new_data_frame$vector2<=0.05)
the_rest=the_rest[order(-the_rest$vector2),]
the_rest
filtered2=subset(new_data_frame,new_data_frame$vector2>0.05)
filtered2=filtered2[order(-filtered2$vector2),]
filtered2
#Reading Data from csv
proteomes <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\77_cancer_proteomes_CPTAC_itraq.csv")
clinical <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\clinical_data_breast_cancer.csv")
gene_proteins <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\PAM50_proteins.csv")
#-------------------------------------Part 1 -------------------------------------------------
#Delete all row have  missing value from data
proteomes=na.omit(proteomes)
#Saving Row names of Proteomes to make it column name
n <- proteomes$RefSeq_accession_number
#Subset Column from 4 index to last index then transpose  the data frame
proteomes <- as.data.frame(t(proteomes[,4:86]))
#get back names of row  that saved in n to make it  name of column
colnames(proteomes) <- n
#bind the data frame to proteomes
proteomes <- cbind(rownames(proteomes), data.frame(proteomes, row.names=NULL))
#name first column same as in clinical data csv
colnames(proteomes)[1] <- "Complete.TCGA.ID"
get.clinical.id <- function(proteome.id) {
x = substr(proteome.id, 4, 7)
y = substr(proteome.id, 0, 2)
paste("TCGA",y,x,sep="-")
}
#sapply to id column in proteomes
proteomes$Complete.TCGA.ID <- sapply(proteomes$Complete.TCGA.ID, get.clinical.id)
#inner join
library(dplyr)
data <-  inner_join(clinical, proteomes, by = "Complete.TCGA.ID")
View(gene_proteins)
View(proteomes)
View(clinical)
for(i in 1:100)
{
Gene=gene_proteins$RefSeqProteinID[i,2]
print(Gene)
}
for(i in 1:100)
{
Gene=gene_proteins[i,2]
print(Gene)
}
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:50 )
{
if(Gene==colnames(data[,j]))
{
print(Gene)
}
}
}
colnames(data)
colnames(data)[0]
colnames(data)[1]
colnames(data)[31]
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:50 )
{
if(Gene==colnames(data)[j])
{
print(Gene)
}
}
}
bool<-data$HER2.Final.Status
for(i in 1:80)
{
if( bool[i] =='Negative')
{
bool[i]=0
}
else if(bool[i]=="Positive")
{
bool[i]=1
}
else{
bool[i]=-1
}
}
bool<-as.numeric(bool)
vector=c(1:20)
index=1
coln=c(colnames(data[,31:50]))
for(i in 31:50)
{
acess<-data[,i]
final<-cor(bool,acess,method ="pearson")
vector[index]=final
index=index+1
}
prot=data.frame(coln,vector)
#2.2
prot=prot[order(-prot$vector),]
prot
#2.3
threshold=0.05
filtered=subset(prot,prot$vector>threshold)
filtered
#-------------------------------------part3--------------------------------------
#3
negative=subset(data,data$HER2.Final.Status=='Negative')
Positive=subset(data,data$HER2.Final.Status=='Positive')
New_data<-rbind(negative,Positive)
vector2=c()
index=1
for(i in 31:50)
{
vector2[index]=t.test(New_data[,i]~New_data$HER2.Final.Status,data=New_data)$p.value
index=index+1
}
new_data_frame<-data.frame(coln,vector2)
new_data_frame
the_rest=subset(new_data_frame,new_data_frame$vector2<=0.05)
the_rest=the_rest[order(-the_rest$vector2),] #reject null Hy significantly different
the_rest
filtered
filtered2=subset(new_data_frame,new_data_frame$vector2>0.05)
filtered2
filtered2
filtered
filtered=subset(prot,prot$vector<threshold)
filtered
filtered2
filtered2=filtered2[order(-filtered2$vector2),]# fail reject null Hy and the are not significantly different
filtered2=filtered2[order(-filtered2$vector2),]# fail reject null Hy and the are not significantly different
filtered2
#-------------------------------------Part 1 -------------------------------------------------
#Delete all row have  missing value from data
proteomes=na.omit(proteomes)
#Reading Data from csv
proteomes <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\77_cancer_proteomes_CPTAC_itraq.csv")
clinical <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\clinical_data_breast_cancer.csv")
gene_proteins <- read.csv("D:\\Bioinformatics 4 (1)\\BioStatistics\\Assignments\\Assignment_3\\PAM50_proteins.csv")
#-------------------------------------Part 1 -------------------------------------------------
#Delete all row have  missing value from data
proteomes=na.omit(proteomes)
#Saving Row names of Proteomes to make it column name
n <- proteomes$RefSeq_accession_number
#Subset Column from 4 index to last index then transpose  the data frame
proteomes <- as.data.frame(t(proteomes[,4:ncol(proteomes)]))
View(proteomes)
#get back names of row  that saved in n to make it  name of column
colnames(proteomes) <- n
#bind the data frame to proteomes
proteomes <- cbind(rownames(proteomes), data.frame(proteomes, row.names=NULL))
#name first column same as in clinical data csv
colnames(proteomes)[1] <- "Complete.TCGA.ID"
get.clinical.id <- function(proteome.id) {
x = substr(proteome.id, 4, 7)
y = substr(proteome.id, 0, 2)
paste("TCGA",y,x,sep="-")
}
#sapply to id column in proteomes
proteomes$Complete.TCGA.ID <- sapply(proteomes$Complete.TCGA.ID, get.clinical.id)
#inner join
library(dplyr)
data <-  inner_join(clinical, proteomes, by = "Complete.TCGA.ID")
View(data)
View(data)
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:ncol(data) )
{
if(Gene==colnames(data)[j])
{
print(Gene)
}
}
}
#-------------------------------------part2-----------------------------------------------------------
#2.1
bool=data$HER2.Final.Status
for(i in 1:80)
{
if( bool[i] =='Negative')
{
bool[i]=0
}
else if(bool[i]=="Positive")
{
bool[i]=1
}
else{
bool[i]=-1
}
}
bool<-as.numeric(bool)
Col_name=c()
vector=c()
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:ncol(data) )
{
if(Gene==colnames(data)[j])
{
final<-cor(data[,j],bool,method ="pearson")
append(Col_name, Gene)
append(Vector, final)
}
}
}
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:ncol(data) )
{
if(Gene==colnames(data)[j])
{
final<-cor(data[,j],bool,method ="pearson")
append(Col_name, Gene)
append(vector, final)
}
}
}
prot=data.frame(Col_name,vector)
prot
for(i in 1:100)
{
Gene=gene_proteins[i,2]
for(j in 31:ncol(data) )
{
if(Gene==colnames(data)[j])
{
final<-cor(data[,j],bool,method ="pearson")
Col_name<-append(Col_name, Gene)
vector<-append(vector, final)
}
}
}
prot=data.frame(Col_name,vector)
prot
#2.2
prot=prot[order(-prot$vector),]
#2.3
threshold=0.05
filtered=subset(prot,prot$vector<threshold)
filtered
order(abs(prot$vector), decreasing = TRUE)
#2.2
prot=prot[order(abs(prot$vector), decreasing = TRUE),]
prot
#2.3
threshold=0.05
filtered=subset(prot,prot$vector<threshold)
filtered
#-------------------------------------part3--------------------------------------
#3
negative=subset(data2,data2$HER2.Final.Status=='Negative')
View(gene_proteins)
#-------------------------------------part3--------------------------------------
#3
negative=subset(data,data$HER2.Final.Status=='Negative')
Positive=subset(data,data$HER2.Final.Status=='Positive')
New_data<-rbind(negative,Positive)
View(New_data)
New_data<-rbind(negative,Positive)
vector2=c()
Col_name2=c()
for(i in 1:nrow(gene_proteins))
{
Gene=gene_proteins[i,2]
for(j in 31:ncol(New_data))
{
if(Gene==colnames(New_data)[j])
{
final<-t.test(New_data[,j]~New_data$HER2.Final.Status,data=New_data)$p.value
Col_name2<-append(Col_name2, Gene)
vector2<-append(vector2, final)
}
}
}
new_data_frame<-data.frame(Col_name2,vector2)
new_data_frame
the_rest=subset(new_data_frame,new_data_frame$vector2<=0.05)
the_rest=the_rest[order(-the_rest$vector2),] #reject null Hy significantly different
the_rest
filtered
filtered2=subset(new_data_frame,new_data_frame$vector2>0.05)
filtered2=filtered2[order(-filtered2$vector2),]# fail reject null Hy and the are not significantly different
filtered2
the_rest
